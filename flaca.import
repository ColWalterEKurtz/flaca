#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# check number of passed parameters
if (( $# != 1 )) ; then

  # show syntax
  echo
  echo "$(basename "$0") <source dir>"
  echo

  # signalize trouble
  exit 1

fi

# run some initial checks
if ! flaca.common check ; then

  # signalize trouble
  exit 1

fi

# create temporary files
TMPLOCAL=$(mktemp --suffix=".local")
TMPREMOTE=$(mktemp --suffix=".remote")

# clean up on exit
trap 'rm -f "$TMPLOCAL" "$TMPREMOTE"' EXIT

# show progress
flaca.common infomsg "searching local pdf files"

# find local pdf files
find -type      "f"                 \
     -regextype "posix-extended"    \
     -regex     ".+\.[Pp][Dd][Ff]$" \
| sort                              \
| while read -r FLASHCARD
do

  sha1sum "$FLASHCARD"

done | sort > "$TMPLOCAL"

# show progress
flaca.common infomsg "searching remote pdf files"

# find remote pdf files
find "$1"                           \
     -type      "f"                 \
     -regextype "posix-extended"    \
     -regex     ".+\.[Pp][Dd][Ff]$" \
| sort                              \
| while read -r FLASHCARD
do

  sha1sum "$FLASHCARD"

done | sort > "$TMPREMOTE"

# show progress
flaca.common infomsg "searching missing pdf files"

# get counter once
NEWNUM=$(flaca.common get_next_number "$(flaca.common get_first_box)")

# check counter
if [ -z "$NEWNUM" ] ; then

  # notify user
  flaca.common failmsg "unable to resolve next available counter: \"$(flaca.common get_first_box)\""

  # signalize trouble
  exit 1

fi

# find hash values that are unique to file 2 (remote pdf files)
comm -13 <(sed -re "s/ .+//" "$TMPLOCAL")  \
         <(sed -re "s/ .+//" "$TMPREMOTE") \
| while read -r HASHKEY
do

  # get related source file
  SRCFILE=$(sed -nre "s/^$HASHKEY[[:space:]]+([^[:space:]].+)/\1/p" "$TMPREMOTE")

  # remove leading counter
  FIXPART=$(flaca.common get_fix_part "$SRCFILE")

  # create target path
  TARGETPATH=$(printf "%s/%06d-%s" "$(flaca.common get_first_box)" "$NEWNUM" "$FIXPART")

  # always step counter
  (( NEWNUM += 1 ))

  # check if file already exists
  if [ -f "$TARGETPATH" ] ; then

    # notify user
    flaca.common warnmsg "skipping file with existing path: \"$TARGETPATH\""

    # try next file
    continue

  fi

  # copy source file to first box
  cp "$SRCFILE" "$TARGETPATH" &>"/dev/null"

  # check operation
  if [ -f "$TARGETPATH" ] ; then

    # show progress
    flaca.common donemsg "file imported: $SRCFILE"

  else

    # notify user
    flaca.common failmsg "unable to copy file: \"$SRCFILE\""

    # signalize trouble
    exit 1

  fi

done

# signalize success
exit 0

