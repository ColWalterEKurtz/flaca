#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# ----------
# full_reset
# ----------
#
#
#
function full_reset()
{
  # show progress
  flaca.common infomsg "creating temporary numbers"

  # initialize file counter
  local COUNTER=0

  # find all flashcards from box directories (lowest to highest)
  find -type      "f"                                            \
       -regextype "posix-extended"                               \
       -regex     ".+/box([[:digit:]]{3}|END)/.+\.[Pp][Dd][Ff]$" \
       -printf    "%P\n"                                         \
  | sort                                                         \
  | while read -r FLASHCARD
  do

    # step counter
    (( COUNTER += 1 ))

    # remove current counter
    local FIXPART=$(flaca.common get_fix_part "$FLASHCARD")

    # set new path
    local TARGETPATH=$(printf "%s/@%06d-%s" "$(flaca.common get_first_box)" "$COUNTER" "$FIXPART")

    # check if file already exists
    if [ -f "$TARGETPATH" ] ; then

      # notify user
      flaca.common warnmsg "file already exists: \"$TARGETPATH\""

      # get hash value
      local HASH=$(sha1sum "$FLASHCARD" | sed -re "s/ .+//")

      # set new path
      local TARGETPATH=$(printf "%s/@%06d-%s-%s" ) "$(flaca.common get_first_box)" "$COUNTER" "$HASH" "$FIXPART"

      # check if file still exists
      if [ -f "$TARGETPATH" ] ; then

        # notify user
        flaca.common failmsg "file already exists: \"$TARGETPATH\""

        # signalize trouble
        return 1

      fi

    fi

    # move flashcard to first box
    mv -f "$FLASHCARD" "$TARGETPATH" &>"/dev/null"

    # check operation
    if [ -f "$TARGETPATH" ] && [ ! -f "$FLASHCARD" ] ; then

      # show progress
      flaca.common donemsg "$FLASHCARD --> $TARGETPATH"

    else

      # notify user
      flaca.common failmsg "flashcard could not be moved: \"$FLASHCARD\""

      # signalize trouble
      return 1

    fi

  done

  # show progress
  flaca.common infomsg "updating flashcard numbers"

  # second run: remove leading '@' characters
  while read -r FLASHCARD
  do

    # remove leading '@' character
    local FIXPART=$(basename "$FLASHCARD" | sed -nre "s/^@//p")

    # check if '@' character has been removed
    if [ -z "$FIXPART" ] ; then

      # next file
      continue

    fi

    # set new path
    local TARGETPATH=$(printf "%s/%s" "$(flaca.common get_first_box)" "$FIXPART")

    # rename flashcard
    mv -f "$FLASHCARD" "$TARGETPATH" &>"/dev/null"

    # check operation
    if [ -f "$FLASHCARD" ] || [ ! -f "$TARGETPATH" ] ; then

      # notify user
      flaca.common failmsg "unable to rename file: \"$FLASHCARD\""

      # signalize trouble
      return 1

    else

      # show progress
      flaca.common donemsg "$TARGETPATH <-- $FLASHCARD"

    fi

  done < <(flaca.common get_pdf_files "$(flaca.common get_first_box)")

  # reset active flashcard
  flaca.common set_active_flashcard ""

  # signalize success
  return 0
}

# -------------
# partial_reset
# -------------
#
#
#
function partial_reset()
{
  # path of the previous box
  local PREVBOX=""

  # find all box directories (lowest to highest)
  while read -r BOXDIR
  do

    # check if previous box is defined
    if [ -n "$PREVBOX" ] ; then

      # get counter once
      local NEWNUM=$(flaca.common get_next_number "$PREVBOX")

      # check counter
      if [ -z "$NEWNUM" ] ; then

        # notify user
        flaca.common failmsg "unable to resolve next available counter: \"$PREVBOX\""

        # signalize trouble
        return 1

      fi

      # move all flashcards to previous box
      while read -r FLASHCARD
      do

        # remove current box index
        local FIXPART=$(flaca.common get_fix_part "$FLASHCARD")

        # create target path
        local TARGETPATH=$(printf "%s/%06d-%s" "$PREVBOX" "$NEWNUM" "$FIXPART")

        # just to make sure not to clobber existing files
        if [ -f "$TARGETPATH" ] ; then

          # notify user
          flaca.common failmsg "target file already exists: \"$TARGETPATH\""

          # signalize trouble
          return 1

        fi

        # move flashcard to previous box
        mv -f "$FLASHCARD" "$TARGETPATH" &>"/dev/null"

        # check operation
        if [ -f "$TARGETPATH" ] && [ ! -f "$FLASHCARD" ] ; then

          # show progress
          flaca.common donemsg "$FIXPART: $PREVBOX <-- $BOXDIR"

        else

          # notify user
          flaca.common failmsg "flashcard could not be moved: \"$FLASHCARD\""

          # signalize trouble
          return 1

        fi

        # step counter
        (( NEWNUM += 1 ))

      done < <(flaca.common get_pdf_files "$BOXDIR")

    fi

    # update previous box
    local PREVBOX="$BOXDIR"

  done < <(flaca.common get_box_directories)

  # signalize success
  return 0
}

# ------------------------------------------------------------------------------
# options                                                                options
# ------------------------------------------------------------------------------

# set default values
OPMODE="NOTHING"

# set options to accept
readonly KNOWN_OPTIONS=":hv01"

# check passed options
while getopts "$KNOWN_OPTIONS" OPTION "$@"
do

  case "$OPTION" in

    # full reset
    "0") OPMODE="FULL"
         ;;

    # partial reset
    "1") OPMODE="PARTIAL"
         ;;

    # show help
    "h") OPMODE="SHOW_HELP"
         ;;

    # show version
    "v") OPMODE="SHOW_VERSION"
         ;;

    "?") flaca.common failmsg "unknown option: -$OPTARG"
         exit 1
         ;;

    ":") flaca.common failmsg "missing argument: -$OPTARG <argument>"
         exit 1
         ;;

  esac

done

# get number of positional parameters
PPNUM=$(( $# - OPTIND + 1 ))

# drop all parsed options
shift $(( OPTIND - 1 ))

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# run some initial checks
if ! flaca.common check ; then

  # signalize trouble
  exit 1

fi

# list flashcards
if [ "$OPMODE" == "NOTHING" ] ; then

  echo
  echo "call  $(basename "$0") -0  to move all flashcards back to $(flaca.common get_first_box)"
  echo "call  $(basename "$0") -1  to move each fashcard back one box"
  echo

# move all flashcards back to FIRSTBOX
elif [ "$OPMODE" == "FULL" ] ; then

  full_reset

# move each flashcard back one box
elif [ "$OPMODE" == "PARTIAL" ] ; then

  # try to get the active flashcard
  ACTIVE=$(flaca.common get_active_flashcard)

  # check if there is an active flashcard
  if [ -n "$ACTIVE" ] ; then

    # notify user
    flaca.common failmsg "move your active flashcard first: $ACTIVE"

    # signalize trouble
    exit 1

  fi

  partial_reset

fi

# signalize success
exit 0

