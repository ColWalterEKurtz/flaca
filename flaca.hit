#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# horizontal tabulator
readonly TAB="	"

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# get active flashcard
ACTIVE=$(flaca.common get_active_flashcard)

# check given path
if [ -z "$ACTIVE" ] ; then

  # notify user
  flaca.common failmsg "no flashcard specified"

  # signalize trouble
  exit 1

fi

# check given path
if [ ! -f "$ACTIVE" ] ; then

  # notify user
  flaca.common failmsg "unable to locate flashcard: \"$ACTIVE\""

  # signalize trouble
  exit 1

fi

# sed abbreviations
readonly SEDREG="^([[:digit:]]{12})-([[:digit:]]{12})-(.+)$"
readonly SEDOUT="\1$TAB\2$TAB\3"

# split flashcard path
read -r QUERYTIME TOUCHTIME FIXPART < <(sed -nre "s/$SEDREG/$SEDOUT/p" <<< "$ACTIVE")

# get current timestamp
NOW=$(date --utc "+%s")

# at least one initial timestamp found
if [ "$QUERYTIME" == "000000000000" ] || [ "$TOUCHTIME" == "000000000000" ] ; then

  # set flashcard 'learned' up to NOW + 60 seconds
  QUERYTIME=$(bc <<< "$NOW + 60")

else

  # set flashcard 'learned' up to NOW + (NOW - TOUCHTIME) * 1.25
  QUERYTIME=$(sed -nre "s/^0*([[:digit:]]+)/\1/ ; s|.+|scale=0; ($NOW + ($NOW - &) * 1.25 + 0.5) / 1|p" <<< "$TOUCHTIME" | bc)

fi

# set current timestamp
TOUCHTIME="$NOW"

# set new filename
TARGETPATH=$(printf "%012d-%012d-%s" "$QUERYTIME" "$TOUCHTIME" "$FIXPART")

# check if target path already exists
if [ -f "$TARGETPATH" ] ; then

  # notify user
  flaca.common failmsg "target file already exists: \"$TARGETPATH\""

  # signalize trouble
  exit 1

fi

# update timestamps
mv -f "$ACTIVE" "$TARGETPATH" &>"/dev/null"

# check operation
if [ -f "$TARGETPATH" ] && [ ! -f "$ACTIVE" ] ; then

  # clear active flashcard
  flaca.common set_active_flashcard ""

  # calculate time difference in seconds
  DELTA=$(bc <<< "$QUERYTIME - $NOW")

  # show progress
  flaca.common donemsg "$FIXPART: +$DELTA = $(date --utc -d "@$QUERYTIME" "+%Y-%m-%d %H:%M:%S UTC")"

else

  # notify user
  flaca.common failmsg "flashcard could not be moved: \"$ACTIVE\""

  # signalize trouble
  exit 1

fi

# signalize success
exit 0

