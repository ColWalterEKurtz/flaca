#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# run some initial checks
if ! flaca.common check ; then

  # signalize trouble
  exit 1

fi

# get active flashcard
ACTIVE=$(flaca.common get_active_flashcard)

# check given path
if [ -z "$ACTIVE" ] ; then

  # notify user
  flaca.common failmsg "no flashcard specified"

  # signalize trouble
  exit 1

fi

# check given path
if [ ! -f "$ACTIVE" ] ; then

  # notify user
  flaca.common failmsg "unable to locate flashcard: \"$ACTIVE\""

  # signalize trouble
  exit 1

fi

# get fix part of the filename
FIXPART=$(flaca.common get_fix_part "$ACTIVE")

# check fix part
if [ -z "$FIXPART" ] ; then

  # notify user
  flaca.common failmsg "unable to resolve fix part of the filename: \"$ACTIVE\""

  # signalize trouble
  exit 1

fi

# get current box
NOWBOX=$(flaca.common get_box "$ACTIVE")

# check box
if [ -z "$NOWBOX" ] ; then

  # notify user
  flaca.common failmsg "unable to resolve current box: \"$ACTIVE\""

  # signalize trouble
  exit 1

fi

# get next box
NEWBOX=$(flaca.common get_next_box "$NOWBOX")

# check box
if [ -z "$NEWBOX" ] ; then

  # notify user
  flaca.common failmsg "unable to resolve next box: \"$NOWBOX\""

  # signalize trouble
  exit 1

fi

# get next counter
NEWNUM=$(flaca.common get_next_number "$NEWBOX")

# check counter
if [ -z "$NEWNUM" ] ; then

  # notify user
  flaca.common failmsg "unable to resolve next counter: \"$NEWBOX\""

  # signalize trouble
  exit 1

fi

# create target path
TARGETPATH=$(printf "%s/%06d-%s" "$NEWBOX" "$NEWNUM" "$FIXPART")

# just to make sure
if [ -f "$TARGETPATH" ] ; then

  # notify user
  flaca.common failmsg "target file already exists: \"$TARGETPATH\""

  # signalize trouble
  exit 1

fi

# move flashcard to next box
mv -f "$ACTIVE" "$TARGETPATH" &>"/dev/null"

# check operation
if [ -f "$TARGETPATH" ] && [ ! -f "$ACTIVE" ] ; then

  # clear active flashcard
  flaca.common set_active_flashcard ""

  # show progress
  flaca.common donemsg "$FIXPART: $NOWBOX --> $NEWBOX"

else

  # notify user
  flaca.common failmsg "flashcard could not be moved: \"$ACTIVE\""

  # signalize trouble
  exit 1

fi

# signalize success
exit 0

