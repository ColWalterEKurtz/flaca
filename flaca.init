#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ----------------
# create_directory
# ----------------
#
# $1  name
#
function create_directory()
{
  # check if directory is already present
  if [ -d "$1" ] ; then

    # notify user
    donemsg "directory already present: $1"

  else

    # try to create directory
    mkdir -p "$1"

    # check if directory is still missing
    if [ ! -d "$1" ] ; then

      # notify user
      failmsg "unable to create directory: \"$1\""

      # signalize trouble
      return 1

    fi

    # notify user
    donemsg "directory created: $1"

  fi

  # signalize success
  return 0
}

# ------------------------------------------------------------------------------
# options                                                                options
# ------------------------------------------------------------------------------

# set default values
OPMODE="DEFAULT"

# set options to accept
readonly KNOWN_OPTIONS=":hv"

# check passed options
while getopts "$KNOWN_OPTIONS" OPTION "$@"
do

  case "$OPTION" in

    # show help
    "h") OPMODE="SHOW_HELP"
         ;;

    # show version
    "v") OPMODE="SHOW_VERSION"
         ;;

    "?") failmsg "unknown option: -$OPTARG"
         exit 1
         ;;

    ":") failmsg "missing argument: -$OPTARG <argument>"
         exit 1
         ;;

  esac

done

# get number of positional parameters
PPNUM=$(( $# - OPTIND + 1 ))

# drop all parsed options
shift $(( OPTIND - 1 ))

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# create directory
create_directory "new"

# create directories
for (( INDEX = 1 ; INDEX < 10 ; INDEX++ ))
do

  # insert leading zeros
  DIRNAME=$(printf "%02d" "$INDEX")

  # create directory
  create_directory "$DIRNAME"

done

# create directory
create_directory "done"

# set filename
CFGFILE=".flaca.cfg"

# redirect entire group
{
  echo "SECTIONS=9"
  echo
  echo "SIZE01=5"
  echo "SIZE02=10"
  echo "SIZE03=15"
  echo "SIZE04=20"
  echo "SIZE05=30"
  echo "SIZE06=50"
  echo "SIZE07=80"
  echo "SIZE08=120"
  echo "SIZE09=150"

} > "$CFGFILE"

# check if file has been created
if [ -s "$CFGFILE" ] ; then

  # notify user
  donemsg "file created: $CFGFILE"

else

  # notify user
  failmsg "unable to create file: \"$CFGFILE\""

  # signalize trouble
  exit 1

fi

# signalize success
exit 0

