#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# horizontal tabulator
readonly TAB="	"

# calculate time offset in seconds
declare -i readonly OFFSET=$(date --utc --date="2019-01-01 00:00:00" "+%s")

# this file holds the path of the active fashcard
readonly ACTIVECARD=".active"

# sleeptime:  last call of hit or miss (UTC)
# awaketime:  NOW + 1.25 * (NOW - sleeptime)
# braintime:  awaketime - sleeptime

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ---------
# show_help
# ---------
#
#
#
function show_help()
{
  echo
  echo "$(basename "$0") [option]"
  echo
  echo "OPTIONS"
  echo "  -q        query next flashcard (expired flashcards first, then new ones)"
  echo "  -Q        query next flashcard (new flashcards only)"
  echo "  -h        let flaca know that the recent query was a hit"
  echo "  -m        let flaca know that the recent query was a miss"
  echo "  -p        show progress"
  echo
  echo "  -t        create template files (template.tex and makefile)"
  echo "  -f        finish template (run pdflatex on template.tex)"
  echo
  echo "  -a        add initial (missing) timestamps to all pdf files in the current directory"
  echo "  -r        remove timestamps from all pdf files in the current directory"
  echo
  echo "  -i <dir>  import missing pdf files from <dir>"
  echo "  -I <dir>  import missing pdf files from <dir> (keep existing timestamps)"
  echo
}

# ------------
# get_now_time
# ------------
#
# This function pushes the current 'time' in seconds to stdout.
#
function get_now_time()
{
  # get current UTC time and sutract '2019-01-01 00:00:00'
  date --utc "+%s - $OFFSET" | bc
}

# ----------------------------
# show_second_difference_tight
# ----------------------------
#
# $1  from time (seconds)
# $2  to   time (seconds)
#
function show_second_difference_tight()
{
  # set internal names
  local readonly FROMTIME="$1"
  local readonly TOTIME="$2"

  {
    echo "scale = 0"
    echo "if ($TOTIME < $FROMTIME) { -1 ; r = $FROMTIME - $TOTIME } else { 1 ; r = $TOTIME - $FROMTIME }"
    echo "d = r / 86400"
    echo "r = r % 86400"
    echo "h = r / 3600"
    echo "r = r % 3600"
    echo "m = r / 60"
    echo "s = r % 60"
    echo "d ; h ; m ; s"
  }                       \
  | bc                    \
  | sed --quiet           \
        --regexp-extended \
        --expression="
          1{ s/^-1$/-/ ; s/^1$/+/ ; h ; b }
          2{ s/$/d/ ; H ; b }
          3{ s/$/h/ ; H ; b }
          4{ s/$/m/ ; H ; b }
          5{ s/$/s/ ; H ; g ; s/\x0A+/ /g ; s/^ // ; s/ $// ; /.+/p ; q }
        "
}

# --------------------
# get_active_flashcard
# --------------------
#
# This function pushes the name of the flashcard to stdout,
# that is currently querried.
#
function get_active_flashcard()
{
  # check if ACTIVECARD file is present and not empty
  if [ -s "$ACTIVECARD" ] ; then

    # print first line that holds at least one non-space character
    sed -nre "s/.*[^[:space:]].*/&/p ; T ; q" "$ACTIVECARD"

  fi
}

# --------------------
# set_active_flashcard
# --------------------
#
# This function sets the name of the flashcard, that is currently querried.
#
# $1  flashcard path
#
function set_active_flashcard()
{
  if [ -z "$1" ] ; then

    truncate -s 0 "$ACTIVECARD"

  else

    echo "$1" > "$ACTIVECARD"

  fi
}

# -----------------
# get_new_flashcard
# -----------------
#
# This function pushes the name of the first flashcard to stdout,
# whose name starts with 000000000000-000000000000.
#
function get_new_flashcard()
{
  # try to find totally new flashcard
  local NEXTCARD=$(find "$PWD"                                                         \
                        -maxdepth  "1"                                                 \
                        -type      "f"                                                 \
                        -regextype "posix-extended"                                    \
                        -regex     ".+/000000000000-000000000000-[^/]+\.[Pp][Dd][Ff]$" \
                        -printf    "%P\n"                                              \
                   | sort                                                              \
                   | head -n 1)

  # check if flashcard has been found
  if [ -n "$NEXTCARD" ] ; then

    # push path to stdout
    echo "$NEXTCARD"

    # signalize success
    return 0

  fi

  # no file found
  return 1
}

# ---------------------
# get_expired_flashcard
# ---------------------
#
# This function pushes the name of the flashcard to stdout,
# that is expired and has the smallest 'learn time'.
#
function get_expired_flashcard()
{
  # sed abbreviations
  local readonly SEDREG="^(0*)([[:digit:]]+)-(0*)([[:digit:]]+)-(.+)$"
  local readonly SEDOUT="\1\2-\3\4-\5$TAB\2$TAB\4"

  # initialize time values ('learn' and 'hit')
  local -i MINLTIME="999999999999"
  local -i MINHTIME="999999999999"
  
  # initialize path of next flashcard to query
  local NEXTCARD=""

  # get current timestamp
  local -i readonly NOW=$(get_now_time)

  # try to find expired flashcard with the smallest 'learn time' value
  while read -r FILENAME QTIME HTIME
  do

    # skip future flashcards
    (( QTIME > NOW )) && continue

    # calculate 'learn time'
    local -i LTIME=$(bc <<< "$QTIME - $HTIME")

    # find minumum LTIME
    if (( LTIME < MINLTIME )) ; then

      # update path
      local NEXTCARD="$FILENAME"

      # update time values
      local -i MINLTIME="$LTIME"
      local -i MINHTIME="$HTIME"

    # very unlikely case of two equal LTIME values
    elif (( LTIME == MINLTIME )) ; then

      # use older flashcard
      if (( HTIME < MINHTIME )) ; then

        # update path
        local NEXTCARD="$FILENAME"

        # update time values
        local -i MINLTIME="$LTIME"
        local -i MINHTIME="$HTIME"

      fi

    fi

  done < <(find "$PWD"                                                               \
                -maxdepth  "1"                                                       \
                -type      "f"                                                       \
                -regextype "posix-extended"                                          \
                -regex     ".+/[[:digit:]]{12}-[[:digit:]]{12}-[^/]+\.[Pp][Dd][Ff]$" \
                -printf    "%P\n"                                                    \
           | sed -nre "/^000000000000-000000000000/{ d } ; s/$SEDREG/$SEDOUT/p")

  # check if flashcard has been found
  if [ -n "$NEXTCARD" ] ; then

    # push path to stdout
    echo "$NEXTCARD"

    # signalize success
    return 0

  fi

  # no file found
  return 1
}

# -------------
# add_timestamp
# -------------
#
#
#
function add_timestamp()
{
  # get pdf files without timestamps
  while read -r FILENAME
  do

    # set initial timestamps
    local NEWNAME="000000000000-000000000000-$FILENAME"

    # check if file already exists
    if [ -f "$NEWNAME" ] ; then

      # notify user
      warnmsg "file already exists: \"$NEWNAME\""

      # next file
      continue

    fi

    # add initial timestamps
    mv -f "$FILENAME" "$NEWNAME" &>"/dev/null"

    # show progress
    infomsg "timestamp added: $FILENAME --> $NEWNAME"

  done < <(find "$PWD"                         \
                -maxdepth  "1"                 \
                -type      "f"                 \
                -regextype "posix-extended"    \
                -regex     ".+\.[Pp][Dd][Ff]$" \
                -printf    "%P\n"              \
           | egrep -v "^[[:digit:]]{12}-[[:digit:]]{12}-")

  # show success
  return 0
}

# ---------------
# finish_template
# ---------------
#
#
#
function finish_template()
{
  # set source file
  local SOURCEFILE="template.tex"

  # check if source file is missing
  if [ ! -f "$SOURCEFILE" ] ; then

    # notify user
    failmsg "unable to locate source file: \"$SOURCEFILE\""

    # signalize trouble
    return 1

  fi

  # get timestamp (UTC)
  local NOW=$(date --utc "+%Y%m%d-%H%M%S")

  # set target file
  local TARGETFILE="$NOW.tex"

  # wait for unique filename
  while [ -f "$TARGETFILE" ]
  do

    # notify user
    warnmsg "target file already exists: $TARGETFILE"

    # wait one second
    sleep 1

    # get timestamp (UTC)
    local NOW=$(date -u "+%Y%m%d-%H%M%S")

    # set target file
    local TARGETFILE="$NOW.tex"

  done

  # copy tex code
  cat "$SOURCEFILE" > "$TARGETFILE"

  # notify user
  donemsg "file created: $TARGETFILE"

  # create pdf file
  pdflatex "$TARGETFILE" &>"/dev/null"

  # check if pdf file has been created
  if [ ! -s "$NOW.pdf" ] ; then

    # notify user
    failmsg "unable to create pdf file: \"$NOW.pdf\""

    # signalize trouble
    return 1

  fi

  # remove temporary files
  rm -f *.aux *.log

  # notify user
  donemsg "file created: $NOW.pdf"

  # signalize success
  return 0
}

# ---
# hit
# ---
#
#
#
function hit()
{
  # get active flashcard
  local ACTIVE=$(get_active_flashcard)

  # check given string
  if [ -z "$ACTIVE" ] ; then

    # notify user
    failmsg "no flashcard specified"

    # signalize trouble
    return 1

  fi

  # check given path
  if [ ! -f "$ACTIVE" ] ; then

    # notify user
    failmsg "unable to locate flashcard: \"$ACTIVE\""

    # signalize trouble
    return 1

  fi

  # sed abbreviations
  readonly SEDREG="^0*([[:digit:]]+)-0*([[:digit:]]+)-(.+)$"
  readonly SEDOUT="\1$TAB\2$TAB\3"

  # split flashcard path
  read -r AWAKETIME SLEEPTIME FIXPART < <(sed -nre "s/$SEDREG/$SEDOUT/p ; T ; q" <<< "$ACTIVE")

  # get current timestamp
  local NOW=$(get_now_time)

  # at least one initial timestamp found
  if [ "$AWAKETIME" == "0" ] || [ "$SLEEPTIME" == "0" ] ; then

    # charm flashcard to sleep for 90 seconds
    local AWAKETIME=$(bc <<< "$NOW + 90")

  else

    # charm flashcard to sleep for 1.25 * (NOW - SLEEPTIME) seconds
    local AWAKETIME=$(bc <<< "scale=0; ($NOW + 1.25 * ($NOW - $SLEEPTIME) + 0.5) / 1")

  fi

  # set new filename
  local TARGETPATH=$(printf "%012d-%012d-%s" "$AWAKETIME" "$NOW" "$FIXPART")

  # check if target path already exists
  if [ -f "$TARGETPATH" ] ; then

    # notify user
    failmsg "target file already exists: \"$TARGETPATH\""

    # signalize trouble
    return 1

  fi

  # update timestamps
  mv -f "$ACTIVE" "$TARGETPATH" &>"/dev/null"

  # check operation
  if [ -f "$TARGETPATH" ] && [ ! -f "$ACTIVE" ] ; then

    # clear active flashcard
    set_active_flashcard ""

    # calculate readable time difference
    local DELTA=$(show_second_difference_tight "$NOW" "$AWAKETIME")

    # show progress
    donemsg "$FIXPART: $DELTA"

  else

    # notify user
    failmsg "flashcard could not be moved: \"$ACTIVE\""

    # signalize trouble
    return 1

  fi

  # signalize success
  return 0
}

# ------
# import
# ------
#
# $1  k  keep timestamps
#     r  reset timestamps
# $2  source directory
#
function import()
{
  # check source directory
  if [ -z "$2" ] || [ ! -d "$2" ] ; then

    # notify user
    failmsg "unable to locate source directory: \"$2\""

    # signalize trouble
    return 1

  fi

  # create temporary files
  local TMPLOCAL=$(mktemp --suffix=".local")
  local TMPREMOTE=$(mktemp --suffix=".remote")

  # clean up on exit
  trap 'rm -f "$TMPLOCAL" "$TMPREMOTE"' EXIT

  # show progress
  infomsg "searching local pdf files"

  # find local pdf files
  find "$PWD"                         \
       -type      "f"                 \
       -regextype "posix-extended"    \
       -regex     ".+\.[Pp][Dd][Ff]$" \
  | sort                              \
  | while read -r FLASHCARD
  do

    sha1sum "$FLASHCARD"

  done | sort > "$TMPLOCAL"

  # show progress
  infomsg "searching remote pdf files"

  # find remote pdf files
  find "$2"                           \
       -type      "f"                 \
       -regextype "posix-extended"    \
       -regex     ".+\.[Pp][Dd][Ff]$" \
  | sort                              \
  | while read -r FLASHCARD
  do

    sha1sum "$FLASHCARD"

  done | sort > "$TMPREMOTE"

  # show progress
  infomsg "searching missing pdf files"

  # find hash values that are unique to file 2 (remote pdf files)
  comm -13 <(sed -re "s/ .+//" "$TMPLOCAL")  \
           <(sed -re "s/ .+//" "$TMPREMOTE") \
  | while read -r HASHKEY
  do

    # get related source file
    local SRCFILE=$(sed -nre "s/^$HASHKEY[[:space:]]+([^[:space:]].+)/\1/p" "$TMPREMOTE")

    # reset timestamps
    if [ "$1" == "r" ] ; then

      local TARGETPATH=$(basename "$SRCFILE" | sed -re "s/^[[:digit:]]{12}-[[:digit:]]{12}-(.+)/\1/ ; s/.+/000000000000-000000000000-&/")

    # keep timestamps
    elif [ "$1" == "k" ] ; then

      local TARGETPATH=$(basename "$SRCFILE" | sed -re "/^[[:digit:]]{12}-[[:digit:]]{12}-.+/{ b } ; s/.+/000000000000-000000000000-&/")

    fi

    # check if file already exists
    if [ -f "$TARGETPATH" ] ; then

      # notify user
      warnmsg "skipping file with existing path: \"$TARGETPATH\""

      # try next file
      continue

    fi

    # copy source file to first box
    cp "$SRCFILE" "$TARGETPATH" &>"/dev/null"

    # check operation
    if [ -f "$TARGETPATH" ] ; then

      # update access and modification times
      touch "$TARGETPATH"

      # show progress
      donemsg "file created: $TARGETPATH"

    else

      # notify user
      failmsg "unable to copy file: \"$SRCFILE\""

      # signalize trouble
      return 1

    fi

  done

  # remove temporary files
  rm -f "$TMPLOCAL" "$TMPREMOTE" 

  # disable trap
  trap - EXIT

  # signalize success
  return 0
}

# ----
# miss
# ----
#
#
#
function miss()
{
  # get active flashcard
  local ACTIVE=$(get_active_flashcard)

  # check given string
  if [ -z "$ACTIVE" ] ; then

    # notify user
    failmsg "no flashcard specified"

    # signalize trouble
    return 1

  fi

  # check given path
  if [ ! -f "$ACTIVE" ] ; then

    # notify user
    failmsg "unable to locate flashcard: \"$ACTIVE\""

    # signalize trouble
    return 1

  fi

  # sed abbreviations
  readonly SEDREG="^0*([[:digit:]]+)-0*([[:digit:]]+)-(.+)$"
  readonly SEDOUT="\1$TAB\2$TAB\3"

  # split flashcard path
  read -r AWAKETIME SLEEPTIME FIXPART < <(sed -nre "s/$SEDREG/$SEDOUT/p ; T ; q" <<< "$ACTIVE")

  # get current timestamp
  local NOW=$(get_now_time)

  # charm flashcard to sleep for 60 seconds
  local AWAKETIME=$(bc <<< "$NOW + 60")

  # set new filename
  local TARGETPATH=$(printf "%012d-%012d-%s" "$AWAKETIME" "$NOW" "$FIXPART")

  # check if target path already exists
  if [ -f "$TARGETPATH" ] ; then

    # notify user
    failmsg "target file already exists: \"$TARGETPATH\""

    # signalize trouble
    return 1

  fi

  # update timestamps
  mv -f "$ACTIVE" "$TARGETPATH" &>"/dev/null"

  # check operation
  if [ -f "$TARGETPATH" ] && [ ! -f "$ACTIVE" ] ; then

    # clear active flashcard
    set_active_flashcard ""

    # calculate readable time difference
    local DELTA=$(show_second_difference_tight "$NOW" "$AWAKETIME")

    # show progress
    donemsg "$FIXPART: $DELTA"

  else

    # notify user
    failmsg "flashcard could not be moved: \"$ACTIVE\""

    # signalize trouble
    return 1

  fi

  # signalize success
  return 0
}

# -------------
# show_progress
# -------------
#
#
#
function show_progress()
{
  # get current timestamp
  local NOW=$(get_now_time)

  # set bc script once
  local readonly BCSCRIPT="                                                                          \
  scale = 0 ;                                                                                        \
  if ($NOW < \\2) { print \"+\\\\n\" ; r = \\2 - $NOW } else { print \"-\\\\n\" ; r = $NOW - \\2 } ; \
  d = r / 86400 ;                                                                                    \
  r = r % 86400 ;                                                                                    \
  h = r / 3600 ;                                                                                     \
  r = r % 3600 ;                                                                                     \
  m = r / 60 ;                                                                                       \
  s = r % 60 ;                                                                                       \
  d ; h ; m ; s ; print \"\\1\\2-\\3\\4-\\5\\\\n\""

  # calculate EXPIRETIME - NOW
  find "$PWD"                                                               \
       -maxdepth  "1"                                                       \
       -type      "f"                                                       \
       -regextype "posix-extended"                                          \
       -regex     ".+/[[:digit:]]{12}-[[:digit:]]{12}-[^/]+\.[Pp][Dd][Ff]$" \
       -printf    "%P\n"                                                    \
  | sed --quiet                                                             \
        --regexp-extended                                                   \
        --expression="

          # skip totally new files
          /^000000000000-000000000000/ d 

          # split filename: FILENAME TAB AWAKETIME TAB SLEEPTIME
          s|^(0*)([[:digit:]]+)-(0*)([[:digit:]]+)-(.+)$|$BCSCRIPT|p

        "                                       \
  | bc                                          \
  | xargs printf "%s %4dd %2dh %2dm %2ds  %s\n" \
  | sort --field-separator="s" --key="2"
}

# -----
# query
# -----
#
# $1  n = new flashcards only
#     x = expired flashcards first
#
function query()
{
  # check if there is still an active flashcard
  local NEXTCARD=$(get_active_flashcard)

  # no (valid) flashcard found
  if [ -z "$NEXTCARD" ] || [ ! -f "$NEXTCARD" ] ; then

    # only new flashcards
    if [ "$1" == "n" ] ; then

      local NEXTCARD=$(get_new_flashcard)

    # expired flashcards first then new ones
    elif [ "$1" == "x" ] ; then

      local NEXTCARD=$(get_expired_flashcard)

      if [ -z "$NEXTCARD" ] ; then

        local NEXTCARD=$(get_new_flashcard)

      fi

    fi

  fi

  # update active flashcard
  set_active_flashcard "$NEXTCARD"

  # check path
  if [ -n "$NEXTCARD" ] ; then

    # show page 1 from NEXTCARD flashcard
    xreader -i 1 "$NEXTCARD" &>"/dev/null" &

  else

    # notify user
    donemsg "all flashcards seem to be learned"

  fi

  # signalize success
  return 0
}

# ----------------
# remove_timestamp
# ----------------
#
#
#
function remove_timestamp()
{
  # sed abbreviations
  local readonly SEDREG="^(0*)([[:digit:]]+)-(0*)([[:digit:]]+)-(.+)$"
  local readonly SEDOUT="\1\2-\3\4-\5$TAB\5"

  # try to find expired flashcard with the smallest 'learn time' value
  while read -r FILENAME NEWNAME
  do

    # check if file already exists
    if [ -f "$NEWNAME" ] ; then

      # notify user
      warnmsg "file already exists: \"$NEWNAME\""

      # next file
      continue

    fi

    # add initial timestamps
    mv -f "$FILENAME" "$NEWNAME" &>"/dev/null"

    # show progress
    infomsg "timestamp removed: $NEWNAME <-- $FILENAME"

  done < <(find "$PWD"                                                               \
                -maxdepth  "1"                                                       \
                -type      "f"                                                       \
                -regextype "posix-extended"                                          \
                -regex     ".+/[[:digit:]]{12}-[[:digit:]]{12}-[^/]+\.[Pp][Dd][Ff]$" \
                -printf    "%P\n"                                                    \
           | sed -nre "s/$SEDREG/$SEDOUT/p"                                          \
           | sort)

  # signalize success
  return 0
}

# -------------
# show_document
# -------------
#
#
#
function show_document()
{
  echo "\\documentclass"
  echo "["
  echo "  11pt,"
  echo "  english"
  echo "]"
  echo "{beamer}"
  echo
  echo "% default packages"
  echo "\\usepackage[utf8]{inputenc}"
  echo "\\usepackage[T1]{fontenc}"
  echo "\\usepackage{lmodern}"
  echo "\\usepackage{babel}"
  echo "% extra packages"
  echo "\\usepackage{amsmath}"
  echo "\\usepackage{amssymb}"
  echo "\\usepackage{graphicx}"
  echo "\\usepackage{ifthen}"
  echo "\\usepackage{pdfpages}"
  echo "\\usepackage{siunitx}"
  echo "\\usepackage{soulutf8}"
  echo "\\usepackage{tikz}"
  echo "\\usepackage{url}"
  echo
  echo "% basic calculations in TikZ"
  echo "\\usetikzlibrary{calc}"
  echo
  echo "% use comma as decimal separator"
  echo "\\sisetup{locale=DE, group-minimum-digits=4}"
  echo
  echo "% enable setulcolor in beamer"
  echo "\\makeatletter"
  echo "\\let\\UL\\ul"
  echo "\\renewcommand\\ul{%"
  echo "  \\let\\set@color\\beamerorig@set@color"
  echo "  \\let\\reset@color\\beamerorig@reset@color"
  echo "  \\UL}"
  echo "\\makeatother"
  echo
  echo "% black lines for \\ul"
  echo "\\setulcolor{black}%"
  echo
  echo "% select global theme"
  echo "\\usetheme{Rochester}"
  echo
  echo "% ------"
  echo "% vstrut"
  echo "% ------"
  echo "%"
  echo "% A vertical spacer."
  echo "%"
  echo "\\newcommand{\\vstrut}{\\vphantom{\\ensuremath{(}}}"
  echo
  echo "% --------"
  echo "% clozegap"
  echo "% --------"
  echo "%"
  echo "% #1  cloze counter"
  echo "% #2  pop up counter"
  echo "% #3  text"
  echo "%"
  echo "\\newcommand{\\clozegap}[3]"
  echo "{%"
  echo "  \\begingroup"
  echo "    \\ifthenelse{#1<#2}"
  echo "    {%"
  echo "      \\color{white}%"
  echo "    }%"
  echo "    {%"
  echo "      \\color{blue}%"
  echo "    }%"
  echo "    \\ul{#3}%"
  echo "  \\endgroup"
  echo "}"
  echo
  echo "% ------------------------------------------------------------------------------"
  echo "\\begin{document}"
  echo "% ------------------------------------------------------------------------------"
  echo
  echo "\\newcommand{\\cloze}[1]"
  echo "{%"
  echo "  \\begin{frame}"
  echo "    \\frametitle{Triangles}"
  echo "    \\begin{minipage}{0.49\\textwidth}"
  echo "      \\centering"
  echo "      \\begin{tikzpicture}"
  echo "        \\coordinate (A) at (0, 0);"
  echo "        \\coordinate (B) at (4, 0);"
  echo "        \\coordinate (C) at (2, 5);"
  echo "        % angles"
  echo "        \\begin{scope}[fill=lightgray, draw=black]"
  echo "          \\clip (A) -- (B) -- (C) -- cycle;"
  echo "          \\filldraw (A) circle[radius=6mm];"
  echo "          \\filldraw (B) circle[radius=6mm];"
  echo "          \\filldraw (C) circle[radius=8mm];"
  echo "          \\node[shift=(30:3.5mm)]  at (A) {\$\\alpha\$};"
  echo "          \\node[shift=(150:3.5mm)] at (B) {\$\\alpha\$};"
  echo "          \\node[shift=(270:5.5mm)] at (C) {\$\\gamma\$};"
  echo "        \\end{scope}"
  echo "        % edges"
  echo "        \\draw (A) -- node[below] {\$c\$}"
  echo "              (B) -- node[right] {\$a\$}"
  echo "              (C) -- node[left]  {\$a\$}"
  echo "              cycle;"
  echo "        % vertices"
  echo "        \\fill[fill=black] (A) circle[radius=1pt] node[below]{\$A\$};"
  echo "        \\fill[fill=black] (B) circle[radius=1pt] node[below]{\$B\$};"
  echo "        \\fill[fill=black] (C) circle[radius=1pt] node[above]{\$C\$};"
  echo "      \\end{tikzpicture}"
  echo "    \\end{minipage}%"
  echo "    \\hfill"
  echo "    \\begin{minipage}{0.49\\textwidth}"
  echo "      In an \\clozegap{#1}{1}{isosceles triangle} the two angles"
  echo "      opposite the legs are always \\clozegap{#1}{2}{equal} and"
  echo "      \\clozegap{#1}{3}{acute}."
  echo "    \\end{minipage}%"
  echo "    \\hfill"
  echo "  \\end{frame}%"
  echo "}%"
  echo
  echo "\\cloze{0}"
  echo "\\cloze{1}"
  echo "\\cloze{2}"
  echo "\\cloze{3}"
  echo
  echo "% ------------------------------------------------------------------------------"
  echo "\\end{document}"
  echo "% ------------------------------------------------------------------------------"
}

# -------------
# show_makefile
# -------------
#
#
#
function show_makefile()
{
  echo "# filename and extensions"
  echo "FILE    = template"
  echo "EXT_IN  = tex"
  echo "EXT_OUT = pdf"
  echo "EXT_LOG = log"
  echo "EXT_TMP = tmp"
  echo
  echo "# tools and options"
  echo "TEX     = pdflatex"
  echo "BIB     = bibtex"
  echo "IDX     = makeindex"
  echo "IFLAGS  ="
  echo "EYE     = xreader"
  echo "DEL     = rm -f"
  echo "REN     = mv -f"
  echo "CNV     = iconv"
  echo "CFLAGS  = --from-code ISO_8859-1 --to-code UTF-8"
  echo
  echo "# always create these targets"
  echo ".PHONY: all clean"
  echo
  echo "# show pdf file"
  echo "all: \$(FILE).\$(EXT_OUT)"
  echo "	\$(EYE) \$(FILE).\$(EXT_OUT)"
  echo
  echo "# create pdf file from all tex files in the current directory"
  echo "\$(FILE).\$(EXT_OUT): *.\$(EXT_IN)"
  echo "#	\$(TEX) \$(FILE).\$(EXT_IN)"
  echo "#	\$(BIB) \$(FILE)"
  echo "#	\$(IDX) \$(IFLAGS) \$(FILE)"
  echo "	\$(TEX) \$(FILE).\$(EXT_IN)"
  echo "	\$(TEX) \$(FILE).\$(EXT_IN)"
  echo "	\$(CNV) \$(CFLAGS) \$(FILE).\$(EXT_LOG) > \$(FILE).\$(EXT_TMP)"
  echo "	\$(DEL) \$(FILE).\$(EXT_LOG)"
  echo "	\$(REN) \$(FILE).\$(EXT_TMP) \$(FILE).\$(EXT_LOG)"
  echo
  echo "# remove temporary files"
  echo "clean:"
  echo "	\$(DEL) *.aux *.bbl *.blg *.idx *.ilg *.ind *.lof *.log *.lot *.nav *.out *.snm *.thm *.toc \$(FILE).\$(EXT_OUT)"
}

# ---------------------
# create_template_files
# ---------------------
#
#
#
function create_template_files()
{
  # reset tex file
  truncate --size=0 "template.tex" &>"/dev/null"

  # check write permission
  if [ ! -w "template.tex" ] ; then

    # notify user
    failmsg "no write permission: $PWD"

    # signalize trouble
    return 1

  fi

  # write tex code
  show_document > "template.tex"

  # notify user
  infomsg "file created: template.tex"

  # reset makefile
  truncate --size=0 "makefile" &>"/dev/null"

  # check write permission
  if [ ! -w "makefile" ] ; then

    # notify user
    failmsg "no write permission: $PWD"

    # signalize trouble
    return 1

  fi

  # write makefile
  show_makefile > "makefile"

  # notify user
  infomsg "file created: makefile"

  # signalize success
  return 0
}

# ------------------------------------------------------------------------------
# options                                                                options
# ------------------------------------------------------------------------------

# set default values
OPMODE="SHOW_HELP"
IMPORT_SOURCE=""

# set options to accept
readonly KNOWN_OPTIONS=":afhI:i:mpQqrt"

# check passed options
while getopts "$KNOWN_OPTIONS" OPTION "$@"
do

  case "$OPTION" in

    "a") OPMODE="ADD_TIMESTAMP"
         ;;

    "f") OPMODE="FINISH_TEMPLATE"
         ;;

    "h") OPMODE="HIT"
         ;;

    "I") OPMODE="IMPORT_KEEP"
         IMPORT_SOURCE="$OPTARG"
         ;;

    "i") OPMODE="IMPORT_RESET"
         IMPORT_SOURCE="$OPTARG"
         ;;

    "m") OPMODE="MISS"
         ;;

    "p") OPMODE="SHOW_PROGRESS"
         ;;

    "Q") OPMODE="QUERY_NEW"
         ;;

    "q") OPMODE="QUERY_EXPIRED"
         ;;

    "r") OPMODE="REMOVE_TIMESTAMP"
         ;;

    "t") OPMODE="CREATE_TEMPLATE_FILES"
         ;;

    "?") failmsg "unknown option: -$OPTARG"
         exit 1
         ;;

    ":") failmsg "missing argument: -$OPTARG <argument>"
         exit 1
         ;;

  esac

done

# get number of positional parameters
PPNUM=$(( $# - OPTIND + 1 ))

# drop all parsed options
shift $(( OPTIND - 1 ))

# check number of positional parameters
if (( PPNUM > 0 )) ; then

  # notify user
  failmsg "no positional parameters allowed"

  # signalize trouble
  exit 1

fi

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

case "$OPMODE" in
  "SHOW_HELP")             show_help                   ;;
  "ADD_TIMESTAMP")         add_timestamp               ;;
  "FINISH_TEMPLATE")       finish_template             ;;
  "HIT")                   hit                         ;;
  "IMPORT_KEEP")           import "k" "$IMPORT_SOURCE" ;;
  "IMPORT_RESET")          import "r" "$IMPORT_SOURCE" ;;
  "MISS")                  miss                        ;;
  "SHOW_PROGRESS")         show_progress               ;;
  "QUERY_NEW")             query "n"                   ;;
  "QUERY_EXPIRED")         query "x"                   ;;
  "REMOVE_TIMESTAMP")      remove_timestamp            ;;
  "CREATE_TEMPLATE_FILES") create_template_files       ;;
esac

# signalize success
exit 0

