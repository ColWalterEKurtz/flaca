#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# set name of the file that holds the path of the current fashcard
readonly CFCFILE=".flaca.cfc"

# set fix box names
readonly FIRSTBOX="box000"
readonly LASTBOX="boxEND"

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# -----------------------
# get_number_of_pdf_files
# -----------------------
#
# This function returns the number of pdf files in the given directory.
#
# $1  directory
#
function get_number_of_pdf_files()
{
  # get number of pdf files in this directory
  find "$1"                           \
       -maxdepth  "1"                 \
       -type      "f"                 \
       -regextype "posix-extended"    \
       -regex     ".+\.[Pp][Dd][Ff]$" \
       -printf    "."                 \
  | wc -c
}

# ------------------
# get_first_pdf_file
# ------------------
#
# This function returns the first pdf file from the given directory.
#
# $1  directory
#
function get_first_pdf_file()
{
  # get first pdf file from this directory
  find "$1"                           \
       -maxdepth  "1"                 \
       -type      "f"                 \
       -regextype "posix-extended"    \
       -regex     ".+\.[Pp][Dd][Ff]$" \
  | sort                              \
  | head -n 1
}

# --------------------
# find_highest_jamming
# --------------------
#
# This function selects the first flashcard from the highest box that is overfull.
#
function find_highest_jamming()
{
  # check each box (largest to smallest)
  find -maxdepth  "1"                     \
       -type      "d"                     \
       -regextype "posix-extended"        \
       -regex     ".+/box[[:digit:]]{3}$" \
  | sort --reverse                        \
  | while read -r BOXDIR
  do

    # get size of this box
    SIZE=$(sed -nre "s/^.+box0*([[:digit:]]+)/\1/p" <<< "$BOXDIR")

    # get number of pdf files in this box
    FILES=$(get_number_of_pdf_files "$BOXDIR")

    # full box found
    if (( FILES > SIZE )) ; then

      # get first pdf file from this directory
      get_first_pdf_file "$BOXDIR" > "$CFCFILE"

      # exit loop
      break

    fi

  done

  # signalize success
  return 0
}

# ---------------------
# find_minimum_progress
# ---------------------
#
# This function selects the first flashcard from the smallest box that holds at least one flashcard.
#
function find_minimum_progress()
{
  # check each box (smallest to largest)
  find -maxdepth  "1"                     \
       -type      "d"                     \
       -regextype "posix-extended"        \
       -regex     ".+/box[[:digit:]]{3}$" \
  | sort                                  \
  | while read -r BOXDIR
  do

    # try to get first pdf file from this box
    get_first_pdf_file "$BOXDIR" > "$CFCFILE"

    # pdf file found
    if [ -s "$CFCFILE" ] ; then

      # exit loop
      break

    fi

  done

  # still no flashcard found
  if [ ! -s "$CFCFILE" ]; then

    # check last box
    get_first_pdf_file "boxEND" > "$CFCFILE"

  fi

  # signalize success
  return 0
}

# ------------------------------------------------------------------------------
# options                                                                options
# ------------------------------------------------------------------------------

# set default values
OPMODE="HIGHEST_JAMMING"

# set options to accept
readonly KNOWN_OPTIONS=":hvm"

# check passed options
while getopts "$KNOWN_OPTIONS" OPTION "$@"
do

  case "$OPTION" in

    # select flashcard that has made the smallest progress
    "m") OPMODE="MINIMUM_PROGRESS"
         ;;

    # show help
    "h") OPMODE="SHOW_HELP"
         ;;

    # show version
    "v") OPMODE="SHOW_VERSION"
         ;;

    "?") failmsg "unknown option: -$OPTARG"
         exit 1
         ;;

    ":") failmsg "missing argument: -$OPTARG <argument>"
         exit 1
         ;;

  esac

done

# get number of positional parameters
PPNUM=$(( $# - OPTIND + 1 ))

# drop all parsed options
shift $(( OPTIND - 1 ))

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# check if first box is missing
if [ ! -d "$FIRSTBOX" ] ; then

  # notify user
  failmsg "unable to locate directory: \"$FIRSTBOX\""

  # signalize trouble
  exit 1

fi

# check if last box is missing
if [ ! -d "$LASTBOX" ] ; then

  # notify user
  failmsg "unable to locate directory: \"$LASTBOX\""

  # signalize trouble
  exit 1

fi

# check permission to write
if [ ! -w "$PWD" ] ; then

  # notify user
  failmsg "no permission to write here: \"$PWD\""

  # signalize trouble
  exit 1

fi

# reset file that holds the path of the current flashcard
truncate -s 0 "$CFCFILE"

# find highest jamming flashcard
if [ "$OPMODE" == "HIGHEST_JAMMING" ] ; then

  find_highest_jamming

  # no flashcard found
  if [ ! -s "$CFCFILE" ] ; then

    # notify user
    donemsg "no jamming flashcards found (add new flashcards or try -m option)"

    # stop here
    exit 0

  fi

# find flashcard that has made the smallest progress
elif [ "$OPMODE" == "MINIMUM_PROGRESS" ] ; then

  find_minimum_progress

  # no flashcard found
  if [ ! -s "$CFCFILE" ] ; then

    # notify user
    warnmsg "no flashcards found"

    # stop here
    exit 0

  fi

fi

# show page 1 from pdf file
cat "$CFCFILE" | xargs -L1 xreader -i 1 &

# signalize success
exit 0

