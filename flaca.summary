#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# run some initial checks
if ! flaca.common check ; then

  # signalize trouble
  exit 1

fi

# start with separating line
echo

# total number of flashcards
TOTAL=0

# find box directories
while read -r BOXDIR
do

  # get number of flashcards in this box
  FNUM=$(flaca.common get_number_of_pdf_files "$BOXDIR")

  # check if LASTBOX is reached
  if [ "$BOXDIR" == "$(flaca.common get_last_box)" ] ; then

    # show number of flashcards in this box directory
    printf "  %s: %5d\n" "$BOXDIR" "$FNUM"

  else

    # get size of this box
    FMAX=$(flaca.common get_box_size "$BOXDIR")

    if (( FNUM > FMAX )) ; then

      # show number of flashcards in this box directory
      printf "  %s: %5d %s%s%s\n" "$BOXDIR" "$FNUM" "$YELLOW" "+" "$NONE"

    else

      # show number of flashcards in this box directory
      printf "  %s: %5d\n" "$BOXDIR" "$FNUM"

    fi

  fi

  # update total number
  (( TOTAL += FNUM ))

done < <(flaca.common get_box_directories)

# show total number of flashcards
printf "  %s%-6s: %5d%s\n" "$CYAN" "total" "$TOTAL" "$NONE"

# get active flashcard
ACTIVE=$(flaca.common get_active_flashcard)

# get next flashcard
NEXT=$(flaca.common get_highest_jamming)

# check if at least one flashcard has been found
if [ -n "$ACTIVE$NEXT" ] ; then

  # insert separating line
  echo

fi

# check if there is an active flashcard
if [ -n "$ACTIVE" ] ; then

  # show active flashcard
  echo "  active flashcard: $ACTIVE"

fi

# check if there is a next flashcard
if [ -n "$NEXT" ] ; then

  # show next flashcard
  echo "  coming flashcard: $NEXT"

fi

# end with separating line
echo

# signalize success
exit 0

